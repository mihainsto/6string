[{"/home/mstoian/Documents/6string/client/src/index.tsx":"1","/home/mstoian/Documents/6string/client/src/reportWebVitals.ts":"2","/home/mstoian/Documents/6string/client/src/App.tsx":"3","/home/mstoian/Documents/6string/client/src/Pages/AccountSettingsPage/AccountSettingsPage.tsx":"4","/home/mstoian/Documents/6string/client/src/Pages/RegisterPage/RegisterPage.tsx":"5","/home/mstoian/Documents/6string/client/src/Pages/HomePage/HomePage.tsx":"6","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/SongPlayPage.tsx":"7","/home/mstoian/Documents/6string/client/src/Pages/LoginPage/LoginPage.tsx":"8","/home/mstoian/Documents/6string/client/src/Pages/SongsPage/SongsPage.tsx":"9","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Tabs.tsx":"10","/home/mstoian/Documents/6string/client/src/Pages/SongsPage/SongCard.tsx":"11","/home/mstoian/Documents/6string/client/src/Components/CloudinaryUploadModal.tsx":"12","/home/mstoian/Documents/6string/client/src/Components/AuthLayout.tsx":"13","/home/mstoian/Documents/6string/client/src/Hooks/useCloudinaryUrl.tsx":"14","/home/mstoian/Documents/6string/client/src/Components/Navigation/Nav.tsx":"15","/home/mstoian/Documents/6string/client/src/Components/Navigation/PlaygroundNav.tsx":"16","/home/mstoian/Documents/6string/client/src/Hooks/useCurrentUser.tsx":"17","/home/mstoian/Documents/6string/client/src/generated/graphql.tsx":"18","/home/mstoian/Documents/6string/client/src/Babylon/BabylonMainPage.tsx":"19","/home/mstoian/Documents/6string/client/src/Hooks/useWindowSize.ts":"20","/home/mstoian/Documents/6string/client/src/Babylon/types.ts":"21","/home/mstoian/Documents/6string/client/src/Babylon/Vertices.ts":"22","/home/mstoian/Documents/6string/client/src/Babylon/AnimateGuitarString.ts":"23","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Measure.tsx":"24","/home/mstoian/Documents/6string/client/src/Hooks/useFileUpload.tsx":"25","/home/mstoian/Documents/6string/client/src/Utils/ValidUrl.ts":"26","/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/babylonjs-hook.tsx":"27","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/index.ts":"28","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Cursor.tsx":"29","/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/scene.tsx":"30","/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/engine.tsx":"31","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/util/player.ts":"32","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/instruments/samples.ts":"33","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/instruments/sound-font.ts":"34"},{"size":1129,"mtime":1610289978679,"results":"35","hashOfConfig":"36"},{"size":416,"mtime":1610289978679,"results":"37","hashOfConfig":"36"},{"size":1155,"mtime":1610289978675,"results":"38","hashOfConfig":"36"},{"size":5953,"mtime":1610289978679,"results":"39","hashOfConfig":"36"},{"size":4778,"mtime":1610289978679,"results":"40","hashOfConfig":"36"},{"size":271,"mtime":1610289978679,"results":"41","hashOfConfig":"36"},{"size":1698,"mtime":1610735623469,"results":"42","hashOfConfig":"36"},{"size":4528,"mtime":1610289978679,"results":"43","hashOfConfig":"36"},{"size":7868,"mtime":1610289978679,"results":"44","hashOfConfig":"36"},{"size":7280,"mtime":1610289978679,"results":"45","hashOfConfig":"36"},{"size":2658,"mtime":1610289978679,"results":"46","hashOfConfig":"36"},{"size":983,"mtime":1610289978679,"results":"47","hashOfConfig":"36"},{"size":956,"mtime":1610289978679,"results":"48","hashOfConfig":"36"},{"size":582,"mtime":1610289978679,"results":"49","hashOfConfig":"36"},{"size":3744,"mtime":1610727780181,"results":"50","hashOfConfig":"36"},{"size":3662,"mtime":1610289978679,"results":"51","hashOfConfig":"36"},{"size":161,"mtime":1610289978679,"results":"52","hashOfConfig":"36"},{"size":18873,"mtime":1610289978679,"results":"53","hashOfConfig":"36"},{"size":7657,"mtime":1610909747199,"results":"54","hashOfConfig":"36"},{"size":1010,"mtime":1610289978679,"results":"55","hashOfConfig":"36"},{"size":95,"mtime":1610289978679,"results":"56","hashOfConfig":"36"},{"size":3076,"mtime":1610289978679,"results":"57","hashOfConfig":"36"},{"size":2505,"mtime":1610289978675,"results":"58","hashOfConfig":"36"},{"size":4279,"mtime":1610289978679,"results":"59","hashOfConfig":"36"},{"size":571,"mtime":1610289978679,"results":"60","hashOfConfig":"36"},{"size":217,"mtime":1610289978679,"results":"61","hashOfConfig":"36"},{"size":6767,"mtime":1610289978679,"results":"62","hashOfConfig":"36"},{"size":1328,"mtime":1610289978679,"results":"63","hashOfConfig":"36"},{"size":437,"mtime":1610289978679,"results":"64","hashOfConfig":"36"},{"size":406,"mtime":1610289978679,"results":"65","hashOfConfig":"36"},{"size":1201,"mtime":1610289978679,"results":"66","hashOfConfig":"36"},{"size":1436,"mtime":1610289978679,"results":"67","hashOfConfig":"36"},{"size":1237,"mtime":1610289978679,"results":"68","hashOfConfig":"36"},{"size":842,"mtime":1610289978679,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"isuww0",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"72"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"72"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"72"},"/home/mstoian/Documents/6string/client/src/index.tsx",[],["161"],"/home/mstoian/Documents/6string/client/src/reportWebVitals.ts",["162"],"import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","/home/mstoian/Documents/6string/client/src/App.tsx",["163","164","165","166"],"import './App.css'\n\nimport React from 'react'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\n\nimport logo from './logo.svg'\nimport { AccountSettingsPage } from './Pages/AccountSettingsPage/AccountSettingsPage'\nimport { HomePage } from './Pages/HomePage/HomePage'\nimport { LoginPage } from './Pages/LoginPage/LoginPage'\nimport { RegisterPage } from './Pages/RegisterPage/RegisterPage'\nimport { SongPlayPage } from './Pages/SongPlayPage/SongPlayPage'\nimport { Tabs } from './Pages/SongPlayPage/Tabs'\nimport { SongsPage } from './Pages/SongsPage/SongsPage'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <Route path=\"/register\">\n          <RegisterPage />\n        </Route>\n        <Route path=\"/songs\">\n          <SongsPage />\n        </Route>\n        <Route path=\"/settings\">\n          <AccountSettingsPage />\n        </Route>\n        <Route path=\"/playsong/:id\">\n          <SongPlayPage />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","/home/mstoian/Documents/6string/client/src/Pages/AccountSettingsPage/AccountSettingsPage.tsx",["167"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport {\n  Avatar,\n  Button,\n  colors,\n  Input,\n  Snackbar,\n  Tab,\n  Tabs,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { FC } from 'react'\n\nimport { CloudinaryUploadModal } from '../../Components/CloudinaryUploadModal'\nimport { Nav } from '../../Components/Navigation/Nav'\nimport { useUpdateUserMutation } from '../../generated/graphql'\nimport { useCloudinaryUrl } from '../../Hooks/useCloudinaryUrl'\nimport { useCurrentUser } from '../../Hooks/useCurrentUser'\n\nexport const AccountSettingsPage: FC = () => {\n  const userData = useCurrentUser()\n  const [username, setUsername] = useState<string | null>(null)\n  const [successSnackbar, setSuccessSnackbar] = useState(false)\n  const [errorSnackbar, setErrorSnackbar] = useState(false)\n  const [imageUploadModal, setImageUploadModal] = useState(false)\n  const [avatarUrl, setAvatarUrl] = useState<string | undefined | null>(\n    undefined,\n  )\n  const [updateUser] = useUpdateUserMutation()\n  const getCloudinaryUrl = useCloudinaryUrl()\n\n  useEffect(() => {\n    setUsername(userData.data?.me.username as string)\n    setAvatarUrl(userData.data?.me.avatarUrl as string)\n  }, [userData.data])\n\n  useEffect(() => {\n    setTimeout(() => setSuccessSnackbar(false), 4000)\n  }, [successSnackbar])\n\n  useEffect(() => {\n    setTimeout(() => setErrorSnackbar(false), 4000)\n  }, [errorSnackbar])\n\n  const imageUploadModalOnSubmit = (cloudinaryId: string) => {\n    setAvatarUrl(cloudinaryId)\n    setImageUploadModal(false)\n  }\n  const saveChangesClicked = async () => {\n    try {\n      const { data } = await updateUser({\n        variables: {\n          ...(username && { username }),\n          ...(avatarUrl !== undefined && avatarUrl !== null && { avatarUrl }),\n        },\n      })\n      if (data?.updateUser.id) {\n        setSuccessSnackbar(true)\n      } else {\n        setErrorSnackbar(true)\n      }\n    } catch (e) {\n      setErrorSnackbar(true)\n    } finally {\n      await userData.refetch()\n    }\n  }\n\n  return (\n    <div>\n      <Nav />\n      <div\n        css={css`\n          margin-top: 150px;\n          padding: 20px 40px 0 40px;\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n        `}\n      >\n        <Tabs\n          css={css`\n            border-right: 1px solid ${colors.grey[500]};\n            width: 200px;\n          `}\n          orientation={'vertical'}\n          value={0}\n        >\n          <Tab label={'Account'} />\n          <Tab label={'Notifications'} />\n          <Tab label={'Password'} />\n          <Tab label={'Playground'} />\n        </Tabs>\n\n        <div css={css``}>\n          <Typography variant={'h5'} color={'textSecondary'}>\n            Account Settings\n          </Typography>\n\n          <div\n            css={css`\n              margin-top: 50px;\n            `}\n          >\n            <Typography variant={'subtitle1'}>Avatar</Typography>\n            <div\n              css={css`\n                margin-top: 10px;\n                display: inline-grid;\n                grid-template-columns: 1fr 1fr 1fr;\n                align-items: center;\n              `}\n            >\n              <Avatar\n                src={avatarUrl ? getCloudinaryUrl(avatarUrl) : ''}\n                style={{ width: 70, height: 70 }}\n              >\n                {userData.data?.me.username.substring(0, 2)}\n              </Avatar>\n              <div>\n                <Button\n                  variant={'outlined'}\n                  color={'primary'}\n                  onClick={() => setImageUploadModal(true)}\n                >\n                  Upload\n                </Button>\n              </div>\n              <div\n                css={css`\n                  margin-left: 20px;\n                `}\n              >\n                <Button variant={'outlined'} onClick={() => setAvatarUrl('')}>\n                  Remove\n                </Button>\n              </div>\n            </div>\n\n            <div\n              css={css`\n                margin-top: 25px;\n                border-top: 1px solid ${colors.grey[500]};\n                width: 700px;\n              `}\n            />\n            <div\n              css={css`\n                margin-top: 50px;\n              `}\n            >\n              <Typography variant={'subtitle1'}>Display Name</Typography>\n              <div\n                css={css`\n                  margin-top: 10px;\n                `}\n              >\n                <TextField\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant={'filled'}\n                  size={'small'}\n                  label={'Change the username'}\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                />\n              </div>\n            </div>\n            <div\n              css={css`\n                margin-top: 25px;\n                border-top: 1px solid ${colors.grey[500]};\n                width: 700px;\n              `}\n            />\n\n            <div\n              css={css`\n                margin-top: 50px;\n                text-align: right;\n              `}\n            >\n              <Button\n                color={'primary'}\n                variant={'contained'}\n                onClick={saveChangesClicked}\n              >\n                Save changes\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div />\n      </div>\n\n      <Snackbar\n        open={successSnackbar}\n        message={'Settings saved successfully'}\n      />\n      <Snackbar\n        open={errorSnackbar}\n        message={'Some error occurred, settings not saved'}\n      />\n      <CloudinaryUploadModal\n        open={imageUploadModal}\n        onSubmit={imageUploadModalOnSubmit}\n        onClose={() => setImageUploadModal(false)}\n      />\n    </div>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Pages/RegisterPage/RegisterPage.tsx",["168"],"/** @jsxImportSource @emotion/react **/\nimport { css } from '@emotion/react'\nimport { Button, TextField, Typography } from '@material-ui/core'\nimport Alert from '@material-ui/lab/Alert/Alert'\nimport { writeStorage } from '@rehooks/local-storage'\nimport React, { useState } from 'react'\nimport { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { AuthLayout } from '../../Components/AuthLayout'\nimport { useRegisterMutation } from '../../generated/graphql'\n\nexport const RegisterPage: FC = () => {\n  const history = useHistory()\n  const [register] = useRegisterMutation()\n  const [username, setUsername] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [registerErrorAlert, setRegisterErrorAlert] = useState('')\n  const [registerSuccessAlert, setRegisterSuccessAlert] = useState(false)\n  const [usernameErrorMessage, setUsernameErrorMessage] = useState('')\n  const [emailErrorMessage, setEmailErrorMessage] = useState('')\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState('')\n  const RegisterClicked = async () => {\n    setUsernameErrorMessage('')\n    setEmailErrorMessage('')\n    setPasswordErrorMessage('')\n    setRegisterErrorAlert('')\n    if (username === '') {\n      setUsernameErrorMessage('Username field cannot be left empty')\n      return\n    }\n    if (email === '') {\n      setEmailErrorMessage('Email field cannot be left empty')\n      return\n    }\n    if (password === '') {\n      setPasswordErrorMessage('Password field cannot be left empty')\n      return\n    }\n    try {\n      const result = await register({\n        variables: { email, password, username },\n      })\n      writeStorage('accessToken', result.data!.signup.refreshToken)\n      setRegisterSuccessAlert(true)\n      setEmailErrorMessage('')\n      setPasswordErrorMessage('')\n      setTimeout(() => {\n        history.push('/')\n      }, 1000)\n    } catch (e) {\n      setRegisterSuccessAlert(false)\n      setRegisterErrorAlert(e.message)\n    }\n  }\n\n  return (\n    <AuthLayout>\n      <Typography variant={'h6'} color={'textSecondary'}>\n        Register\n      </Typography>\n\n      {registerSuccessAlert && (\n        <Alert\n          css={css`\n            margin-top: 30px;\n          `}\n          severity=\"success\"\n        >\n          Register success! You will be redirected to the home page.\n        </Alert>\n      )}\n\n      {registerErrorAlert !== '' && (\n        <Alert\n          css={css`\n            margin-top: 30px;\n          `}\n          severity=\"error\"\n        >\n          {registerErrorAlert}\n        </Alert>\n      )}\n      <div\n        css={css`\n          display: grid;\n          margin-top: 50px;\n          gap: 40px;\n        `}\n      >\n        <TextField\n          css={css`\n            width: 100%;\n          `}\n          error={usernameErrorMessage !== '' && true}\n          id=\"outlined-basic\"\n          label=\"Username\"\n          helperText={usernameErrorMessage}\n          variant=\"outlined\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n\n        <TextField\n          css={css`\n            width: 100%;\n          `}\n          error={emailErrorMessage !== '' && true}\n          id=\"outlined-basic\"\n          label=\"Email\"\n          helperText={emailErrorMessage}\n          variant=\"outlined\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <TextField\n          css={css`\n            width: 100%;\n          `}\n          error={passwordErrorMessage !== '' && true}\n          helperText={passwordErrorMessage}\n          id=\"outlined-basic\"\n          label=\"Password\"\n          variant=\"outlined\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n      </div>\n      <div\n        css={css`\n          margin-top: 20px;\n        `}\n      >\n        <div\n          css={css`\n            margin-top: 40px;\n          `}\n        >\n          <Button\n            css={css`\n              width: 100%;\n            `}\n            color={'primary'}\n            variant={'contained'}\n            onClick={RegisterClicked}\n          >\n            Register\n          </Button>\n        </div>\n\n        <div\n          css={css`\n            margin-top: 20px;\n            display: flex;\n            align-items: center;\n          `}\n        >\n          <Typography>Already have an account?</Typography>\n          <Typography\n            css={css`\n              padding-left: 5px;\n              cursor: pointer;\n            `}\n            variant={'subtitle2'}\n            onClick={() => history.push('/login')}\n          >\n            Log in now\n          </Typography>\n        </div>\n      </div>\n    </AuthLayout>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Pages/HomePage/HomePage.tsx",[],"/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/SongPlayPage.tsx",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport { Button } from '@material-ui/core'\nimport { writeStorage } from '@rehooks/local-storage'\nimport React, { createRef, useEffect, useMemo, useRef, useState } from 'react'\nimport { FC } from 'react'\nimport { standard } from 'react-guitar-tunings'\nimport { Resizable, ResizableBox } from 'react-resizable'\nimport { useParams } from 'react-router-dom'\nimport * as Tone from 'tone'\n\nimport { BabylonMainPage } from '../../Babylon/BabylonMainPage'\nimport { PlaygroundNav } from '../../Components/Navigation/PlaygroundNav'\nimport { useSongQuery } from '../../generated/graphql'\nimport { useRect } from '../../Hooks/useRect'\nimport useWindowSize from '../../Hooks/useWindowSize'\nimport useSound from '../../Packages/react-guitar-sound'\nimport {\n  GuitarProTab,\n  Measure as MeasureType,\n} from '../../Types/guitarProTabs.types'\nimport { Measure } from './Measure'\nimport { Tabs } from './Tabs'\n\nexport const SongPlayPage: FC = () => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const { id } = useParams()\n  const { data, loading } = useSongQuery({ variables: { id } })\n  const tab: GuitarProTab | undefined = data?.song.tab\n  const track = tab?.tracks[0]\n  useEffect(() => {\n    writeStorage('currentNotes', null)\n  }, [])\n  return (\n    <div\n      css={css`\n        width: 100%;\n        height: 100%;\n      `}\n    >\n      {/*<div*/}\n      {/*  css={css`*/}\n      {/*    position: absolute;*/}\n      {/*    width: 100%;*/}\n      {/*  `}*/}\n      {/*>*/}\n      {/*  <PlaygroundNav />*/}\n      {/*</div>*/}\n\n      <BabylonMainPage />\n      {tab && <Tabs tab={tab} />}\n    </div>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Pages/LoginPage/LoginPage.tsx",["186","187","188"],"/** @jsxImportSource @emotion/react **/\n\nimport { gql, useMutation } from '@apollo/client'\nimport { css } from '@emotion/react'\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport Alert from '@material-ui/lab/Alert/Alert'\nimport { writeStorage } from '@rehooks/local-storage'\nimport React, { useState } from 'react'\nimport { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { AuthLayout } from '../../Components/AuthLayout'\nimport { useLoginMutation } from '../../generated/graphql'\n\nexport const LoginPage: FC = () => {\n  const history = useHistory()\n  const [login] = useLoginMutation()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [rememberMe, setRememberMe] = useState(false)\n  const [incorrectDataAlert, setIncorrectDataAlert] = useState(false)\n  const [loginSuccessAlert, setLoginSuccessAlert] = useState(false)\n  const [emailErrorMessage, setEmailErrorMessage] = useState('')\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState('')\n  const loginClicked = async () => {\n    setEmailErrorMessage('')\n    setPasswordErrorMessage('')\n    if (email === '') {\n      setEmailErrorMessage('Email field cannot be left empty')\n      return\n    }\n    if (password === '') {\n      setPasswordErrorMessage('Password field cannot be left empty')\n      return\n    }\n    try {\n      const result = await login({ variables: { email, password } })\n      writeStorage('accessToken', result.data!.login.refreshToken)\n\n      setIncorrectDataAlert(false)\n      setLoginSuccessAlert(true)\n      setEmailErrorMessage('')\n      setPasswordErrorMessage('')\n      setTimeout(() => {\n        history.push('/')\n      }, 1000)\n    } catch (e) {\n      setLoginSuccessAlert(false)\n      setIncorrectDataAlert(true)\n    }\n  }\n\n  return (\n    <AuthLayout>\n      <Typography variant={'h6'} color={'textSecondary'}>\n        Log In\n      </Typography>\n      {incorrectDataAlert && (\n        <Alert\n          css={css`\n            margin-top: 30px;\n          `}\n          severity=\"error\"\n        >\n          Incorrect email or password.\n        </Alert>\n      )}\n\n      {loginSuccessAlert && (\n        <Alert\n          css={css`\n            margin-top: 30px;\n          `}\n          severity=\"success\"\n        >\n          Login success! You will be redirected to the home page.\n        </Alert>\n      )}\n      <div\n        css={css`\n          display: grid;\n          margin-top: 50px;\n          gap: 40px;\n        `}\n      >\n        <TextField\n          css={css`\n            width: 100%;\n          `}\n          error={emailErrorMessage !== '' && true}\n          id=\"outlined-basic\"\n          label=\"Email\"\n          helperText={emailErrorMessage}\n          variant=\"outlined\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <TextField\n          css={css`\n            width: 100%;\n          `}\n          error={passwordErrorMessage !== '' && true}\n          helperText={passwordErrorMessage}\n          id=\"outlined-basic\"\n          label=\"Password\"\n          variant=\"outlined\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n      </div>\n      <div\n        css={css`\n          margin-top: 20px;\n        `}\n      >\n        <FormControlLabel\n          control={\n            <Checkbox\n              name=\"checkedI\"\n              color={'primary'}\n              value={rememberMe}\n              onChange={(e) => setRememberMe(e.target.checked)}\n            />\n          }\n          label=\"Remember Me\"\n        />\n\n        <div\n          css={css`\n            margin-top: 40px;\n          `}\n        >\n          <Button\n            css={css`\n              width: 100%;\n            `}\n            color={'primary'}\n            variant={'contained'}\n            onClick={loginClicked}\n          >\n            Log In\n          </Button>\n        </div>\n\n        <div\n          css={css`\n            margin-top: 20px;\n            display: flex;\n            align-items: center;\n          `}\n        >\n          <Typography>Have no account?</Typography>\n          <Typography\n            css={css`\n              padding-left: 5px;\n              cursor: pointer;\n            `}\n            variant={'subtitle2'}\n            onClick={() => history.push('/register')}\n          >\n            Sing up now\n          </Typography>\n        </div>\n      </div>\n    </AuthLayout>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Pages/SongsPage/SongsPage.tsx",["189","190","191"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from '@material-ui/core'\nimport React, { FC, useEffect, useState } from 'react'\n\nimport { Nav, pages } from '../../Components/Navigation/Nav'\nimport {\n  Difficulty,\n  GuitarStyle,\n  OrderDirection,\n  SongEdge,\n  SongFilter,\n  SongOrder,\n  SongOrderField,\n  useSongsQuery,\n} from '../../generated/graphql'\nimport { SongCard } from './SongCard'\n\nexport const SongsPage: FC = () => {\n  const first = 10\n  const [filtersOpen, setFiltersOpen] = useState(false)\n  const [activeDebounce, setActiveDebounce] = useState(false)\n  const [queryField, setQueryField] = useState('')\n  const [searchQuery, setSearchQuery] = useState<string | null>('')\n  const [songFilter, setSongFilter] = useState<SongFilter | null>(null)\n  const [songOrder, setSongOrder] = useState<SongOrder | null>(null)\n  const [cursor, setCursor] = useState('')\n  const [lastCursor, setLastCursor] = useState('')\n  const [songs, setSongs] = useState<SongEdge[]>([])\n\n  const [styleSelect, setStyleSelect] = useState<GuitarStyle | 'ALL'>('ALL')\n  const [tuningSelect, setTuningSelect] = useState<string>('ALL')\n  const [difficultySelect, setDifficultySelect] = useState<Difficulty | 'ALL'>(\n    'ALL',\n  )\n  const [sortBySelect, setSortBySelect] = useState<SongOrderField | 'None'>(\n    'None',\n  )\n  const { data } = useSongsQuery({\n    variables: {\n      after: cursor,\n      first: first,\n      query: searchQuery,\n      filter: songFilter,\n      orderBy: songOrder,\n    },\n  })\n\n  const resetData = () => {\n    setSongs([])\n    setCursor('')\n    setLastCursor('')\n  }\n  const setFilter = (filter: SongFilter) => {\n    resetData()\n    setSongs([])\n    setSongFilter({\n      ...songFilter,\n      ...filter,\n    })\n  }\n\n  const setSortBy = (order: SongOrderField | null) => {\n    resetData()\n    setSongs([])\n    if (order)\n      setSongOrder({\n        direction: OrderDirection.Asc,\n        field: order,\n      })\n    else {\n      setSongOrder(null)\n    }\n  }\n  useEffect(() => setActiveDebounce(true), [])\n  useEffect(() => {\n    if (data?.songs.edges && searchQuery != null) {\n      const newSongs = [...songs, ...data?.songs.edges]\n      console.log(newSongs)\n\n      setSongs(newSongs as SongEdge[])\n      setLastCursor(data.songs.pageInfo.endCursor!)\n    }\n  }, [data, searchQuery])\n\n  useEffect(() => {\n    const delayDebounceFn = setTimeout(() => {\n      if (!activeDebounce) return\n      setSearchQuery(null)\n      resetData()\n      if (queryField.length > 2) {\n        setSearchQuery(queryField)\n      } else if (queryField.length == 0) {\n        setSearchQuery('')\n      }\n    }, 300)\n\n    return () => clearTimeout(delayDebounceFn)\n  }, [queryField])\n\n  return (\n    <div>\n      <Nav page={pages.Songs} />\n      <div\n        css={css`\n          margin-top: 40px;\n          display: flex;\n          justify-content: center;\n        `}\n      >\n        <div\n          css={css`\n            width: 900px;\n          `}\n        >\n          <TextField\n            variant={'outlined'}\n            label={'Artist name or song title'}\n            css={css`\n              width: 100%;\n            `}\n            value={queryField}\n            onChange={(event) => {\n              setQueryField(event.target.value)\n            }}\n          />\n\n          <div\n            css={css`\n              text-align: right;\n              margin-top: 20px;\n            `}\n          >\n            <Button\n              color={filtersOpen ? 'secondary' : 'primary'}\n              variant={'contained'}\n              onClick={() => setFiltersOpen(!filtersOpen)}\n            >\n              Filters\n            </Button>\n          </div>\n          <div\n            css={css`\n              margin-top: 20px;\n              display: flex;\n              justify-content: space-between;\n              display: ${!filtersOpen && 'none'};\n            `}\n          >\n            <FormControl\n              css={css`\n                width: 150px;\n              `}\n            >\n              <InputLabel>Guitar style</InputLabel>\n              <Select\n                value={styleSelect}\n                onChange={(e) => {\n                  setStyleSelect(e.target.value as GuitarStyle)\n                  if (e.target.value === 'ALL') {\n                    setFilter({ style: null })\n                  } else {\n                    setFilter({ style: e.target.value as GuitarStyle })\n                  }\n                }}\n              >\n                <MenuItem value={'ALL'}> All</MenuItem>\n                <MenuItem value={GuitarStyle.Fingerpick}>Fingerpick</MenuItem>\n                <MenuItem value={GuitarStyle.Strum}>Strum</MenuItem>\n              </Select>\n            </FormControl>\n\n            <FormControl\n              css={css`\n                width: 150px;\n              `}\n            >\n              <InputLabel>Guitar tuning</InputLabel>\n              <Select\n                value={tuningSelect}\n                onChange={(e) => {\n                  setTuningSelect(e.target.value as string)\n                  if (e.target.value === 'ALL') {\n                    setFilter({ tuning: null })\n                  } else {\n                    setFilter({ tuning: e.target.value as string })\n                  }\n                }}\n              >\n                <MenuItem value={'ALL'}>All</MenuItem>\n                <MenuItem value={'standard'}>Standard</MenuItem>\n              </Select>\n            </FormControl>\n\n            <FormControl\n              css={css`\n                width: 150px;\n              `}\n            >\n              <InputLabel>Difficulty</InputLabel>\n              <Select\n                value={difficultySelect}\n                onChange={(e) => {\n                  setDifficultySelect(e.target.value as Difficulty)\n                  if (e.target.value === 'ALL') {\n                    setFilter({ difficulty: null })\n                  } else {\n                    setFilter({ difficulty: e.target.value as Difficulty })\n                  }\n                }}\n              >\n                <MenuItem value={'ALL'}>All</MenuItem>\n                <MenuItem value={Difficulty.Easy}>Easy</MenuItem>\n                <MenuItem value={Difficulty.Medium}>Medium</MenuItem>\n                <MenuItem value={Difficulty.Hard}>Hard</MenuItem>\n              </Select>\n            </FormControl>\n\n            <FormControl\n              css={css`\n                width: 150px;\n              `}\n            >\n              <InputLabel>Sort by</InputLabel>\n              <Select\n                value={sortBySelect}\n                onChange={(e) => {\n                  setSortBySelect(e.target.value as SongOrderField)\n                  if (e.target.value === 'None') setSortBy(null)\n                  else setSortBy(e.target.value as SongOrderField)\n                }}\n              >\n                <MenuItem value={'None'}> None</MenuItem>\n                <MenuItem value={SongOrderField.CreatedAt}>Created At</MenuItem>\n                <MenuItem value={SongOrderField.Style}>Style</MenuItem>\n                <MenuItem value={SongOrderField.Difficulty}>\n                  Difficulty\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n          <div\n            css={css`\n              margin-top: 40px;\n            `}\n          >\n            {songs.map((song, index) => {\n              return <SongCard song={song} key={index} />\n            })}\n            <div\n              css={css`\n                text-align: center;\n                margin-top: 20px;\n              `}\n            >\n              <Button size={'large'} onClick={() => setCursor(lastCursor)}>\n                Load More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Tabs.tsx",[],"/home/mstoian/Documents/6string/client/src/Pages/SongsPage/SongCard.tsx",[],"/home/mstoian/Documents/6string/client/src/Components/CloudinaryUploadModal.tsx",["192","193"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport { DropzoneDialog } from 'material-ui-dropzone'\nimport React, { useState } from 'react'\nimport { FC } from 'react'\n\nimport { useFileUpload } from '../Hooks/useFileUpload'\n\ntype CloudinaryUploadModalProps = {\n  open: boolean\n  onSubmit: (cloudinaryId: string) => void\n  onClose: () => void\n}\nexport const CloudinaryUploadModal: FC<CloudinaryUploadModalProps> = ({\n  open,\n  onSubmit,\n  onClose,\n}) => {\n  const uploadFile = useFileUpload()\n  const handleSave = async (files: File[]) => {\n    const response = await uploadFile(files[0])\n    onSubmit(response.public_id)\n  }\n\n  return (\n    <div>\n      <DropzoneDialog\n        filesLimit={1}\n        dialogTitle={'Upload Image'}\n        open={open}\n        onSave={handleSave}\n        acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n        showPreviews={true}\n        maxFileSize={5000000}\n        onClose={onClose}\n      />\n    </div>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Components/AuthLayout.tsx",[],"/home/mstoian/Documents/6string/client/src/Hooks/useCloudinaryUrl.tsx",["194","195","196"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport { Cloudinary } from 'cloudinary-core'\nimport React from 'react'\nimport { FC } from 'react'\n\nimport { isValidURL } from '../Utils/ValidUrl'\n\nexport const useCloudinaryUrl: () => (\n  id: string,\n) => string | undefined = () => {\n  const cloudinaryCore = new Cloudinary({ cloud_name: 'dizv2pxl0' })\n  const getCloudinaryUrl = (id: string): string | undefined => {\n    if (!id) return undefined\n    if (!isValidURL(id)) return cloudinaryCore.url(id)\n    else return id\n  }\n  return getCloudinaryUrl\n}\n","/home/mstoian/Documents/6string/client/src/Components/Navigation/Nav.tsx",["197","198"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport {\n  Avatar,\n  Button,\n  Menu,\n  MenuItem,\n  Paper,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core'\nimport { useLocalStorage, writeStorage } from '@rehooks/local-storage'\nimport React, { useState } from 'react'\nimport { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { useCloudinaryUrl } from '../../Hooks/useCloudinaryUrl'\nimport { useCurrentUser } from '../../Hooks/useCurrentUser'\n\nexport enum pages {\n  'Home' = 0,\n  'Songs' = 1,\n  'Playground' = 2,\n  'Submit_Tab' = 3,\n  'About' = 4,\n}\ntype navProps = {\n  page?: pages\n}\nexport const Nav: FC<navProps> = ({ page }) => {\n  const [token] = useLocalStorage('accessToken')\n  const { data, loading } = useCurrentUser()\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null)\n  const getCloudinaryUrl = useCloudinaryUrl()\n  const handleMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setMenuAnchorEl(event.currentTarget)\n  }\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null)\n  }\n  const history = useHistory()\n  const handleTabChange = (tab: number) => {\n    if (tab === pages.Home) {\n      history.push('/')\n    }\n    if (tab === pages.Songs) {\n      history.push('/songs')\n    }\n  }\n  return (\n    <div\n      css={css`\n        padding: 20px 40px 0 40px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      `}\n    >\n      <Typography color={'primary'} variant={'subtitle2'}>\n        Project-sixstring\n      </Typography>\n      <Tabs\n        value={page}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n        onChange={(event, value) => handleTabChange(value)}\n      >\n        <Tab label={'Home'} />\n        <Tab label={'Songs'} />\n        <Tab label={'Playground'} />\n        <Tab label={'Submit Tab'} />\n        <Tab label={'About'} />\n      </Tabs>\n      <div>\n        {!token && (\n          <Button\n            css={css`\n              padding: 10px 30px 10px 30px;\n            `}\n            variant={'contained'}\n            color={'primary'}\n            size={'large'}\n            onClick={() => history.push('/login')}\n          >\n            Login\n          </Button>\n        )}\n        {!loading && token && (\n          <div>\n            {data && (\n              <>\n                <button\n                  css={css`\n                    background: transparent;\n                    border: none !important;\n                  `}\n                  onClick={handleMenuClick}\n                >\n                  <Avatar\n                    css={css`\n                      cursor: pointer;\n                    `}\n                    alt={'Avatar'}\n                    src={getCloudinaryUrl(data.me.avatarUrl!)}\n                  >\n                    {data.me.username.substring(0, 2)}\n                  </Avatar>\n                </button>\n                <Menu\n                  css={css`\n                    margin-top: 40px;\n                  `}\n                  anchorEl={menuAnchorEl}\n                  keepMounted\n                  open={Boolean(menuAnchorEl)}\n                  onClose={handleMenuClose}\n                >\n                  <MenuItem onClick={() => history.push('/settings')}>\n                    Settings\n                  </MenuItem>\n                  <MenuItem>Favorites</MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      writeStorage('accessToken', null)\n                    }}\n                  >\n                    Log out\n                  </MenuItem>\n                </Menu>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Components/Navigation/PlaygroundNav.tsx",["199","200","201","202","203"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport {\n  Avatar,\n  Button,\n  colors,\n  Menu,\n  MenuItem,\n  Paper,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core'\nimport { ArrowBack, Settings } from '@material-ui/icons'\nimport { useLocalStorage, writeStorage } from '@rehooks/local-storage'\nimport React, { useState } from 'react'\nimport { FC } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { useCloudinaryUrl } from '../../Hooks/useCloudinaryUrl'\nimport { useCurrentUser } from '../../Hooks/useCurrentUser'\n\nexport const PlaygroundNav: FC = () => {\n  const [token] = useLocalStorage('accessToken')\n  const { data, loading } = useCurrentUser()\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null)\n  const getCloudinaryUrl = useCloudinaryUrl()\n  const handleMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setMenuAnchorEl(event.currentTarget)\n  }\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null)\n  }\n  const history = useHistory()\n\n  return (\n    <div\n      css={css`\n        padding: 20px 40px 0 40px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        gap: 25px;\n      `}\n    >\n      <div\n        css={css`\n          justify-self: flex-start;\n          margin-right: auto;\n        `}\n      >\n        <Button onClick={() => history.goBack()}>\n          <ArrowBack\n            css={css`\n              color: ${colors.grey[600]};\n            `}\n            fontSize={'large'}\n          />\n        </Button>\n      </div>\n\n      {!loading && token && (\n        <Button>\n          <Settings\n            css={css`\n              color: ${colors.grey[600]};\n            `}\n            fontSize={'large'}\n          />\n        </Button>\n      )}\n      <div\n        css={css`\n          justify-self: flex-end;\n        `}\n      >\n        {!token && (\n          <Button\n            css={css`\n              padding: 10px 30px 10px 30px;\n            `}\n            variant={'contained'}\n            color={'primary'}\n            size={'large'}\n            onClick={() => history.push('/login')}\n          >\n            Login\n          </Button>\n        )}\n        {!loading && token && (\n          <div>\n            {data && (\n              <>\n                <button\n                  css={css`\n                    background: transparent;\n                    border: none !important;\n                  `}\n                  onClick={handleMenuClick}\n                >\n                  <Avatar\n                    css={css`\n                      cursor: pointer;\n                    `}\n                    alt={'Avatar'}\n                    src={getCloudinaryUrl(data.me.avatarUrl!)}\n                  >\n                    {data.me.username.substring(0, 2)}\n                  </Avatar>\n                </button>\n                <Menu\n                  css={css`\n                    margin-top: 40px;\n                  `}\n                  anchorEl={menuAnchorEl}\n                  keepMounted\n                  open={Boolean(menuAnchorEl)}\n                  onClose={handleMenuClose}\n                >\n                  <MenuItem onClick={() => history.push('/settings')}>\n                    Settings\n                  </MenuItem>\n                  <MenuItem>Favorites</MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      writeStorage('accessToken', null)\n                    }}\n                  >\n                    Log out\n                  </MenuItem>\n                </Menu>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",["204"],"/home/mstoian/Documents/6string/client/src/Hooks/useCurrentUser.tsx",["205","206","207"],"import { gql, useQuery } from '@apollo/client'\n\nimport { useMeQuery } from '../generated/graphql'\n\nexport const useCurrentUser = () => {\n  return useMeQuery()\n}\n","/home/mstoian/Documents/6string/client/src/generated/graphql.tsx",["208","209","210","211","212","213","214","215","216","217","218"],"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-nocheck\nimport { gql } from '@apollo/client'\nimport * as Apollo from '@apollo/client'\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  /** Date custom scalar type */\n  Date: any\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: any\n}\n\nexport type Auth = {\n  __typename?: 'Auth'\n  /** JWT access token */\n  accessToken: Scalars['String']\n  /** JWT refresh token */\n  refreshToken: Scalars['String']\n  user: User\n}\n\nexport type ChangePasswordInput = {\n  newPassword: Scalars['String']\n  oldPassword: Scalars['String']\n}\n\nexport type CreateSongInput = {\n  artist: Scalars['String']\n  difficulty: Difficulty\n  style?: Maybe<GuitarStyle>\n  title: Scalars['String']\n  tuning: Scalars['String']\n}\n\nexport enum Difficulty {\n  Easy = 'EASY',\n  Hard = 'HARD',\n  Medium = 'MEDIUM',\n}\n\nexport enum GuitarOrientation {\n  LeftHanded = 'LEFT_HANDED',\n  RightHanded = 'RIGHT_HANDED',\n}\n\nexport enum GuitarStyle {\n  Fingerpick = 'FINGERPICK',\n  Strum = 'STRUM',\n}\n\nexport enum GuitarType {\n  Acoustic = 'ACOUSTIC',\n  Classical = 'CLASSICAL',\n  Electrical = 'ELECTRICAL',\n}\n\nexport type LoginInput = {\n  email: Scalars['String']\n  password: Scalars['String']\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  changePassword: User\n  createSong: Song\n  login: Auth\n  refreshToken: Token\n  signup: Auth\n  updateUser: User\n}\n\nexport type MutationChangePasswordArgs = {\n  data: ChangePasswordInput\n}\n\nexport type MutationCreateSongArgs = {\n  input: CreateSongInput\n}\n\nexport type MutationLoginArgs = {\n  data: LoginInput\n}\n\nexport type MutationRefreshTokenArgs = {\n  token: Scalars['String']\n}\n\nexport type MutationSignupArgs = {\n  data: SignupInput\n}\n\nexport type MutationUpdateUserArgs = {\n  data: UpdateUserInput\n}\n\n/** Possible directions in which to order a list of items when provided an `orderBy` argument. */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n\nexport type PageInfo = {\n  __typename?: 'PageInfo'\n  endCursor?: Maybe<Scalars['String']>\n  hasNextPage: Scalars['Boolean']\n  hasPreviousPage: Scalars['Boolean']\n  startCursor?: Maybe<Scalars['String']>\n}\n\nexport type PlaygroundSettings = {\n  __typename?: 'PlaygroundSettings'\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['Date']\n  guitarOrientation: GuitarOrientation\n  guitarStyle: GuitarStyle\n  guitarType: GuitarType\n  id: Scalars['ID']\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['Date']\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  hello: Scalars['String']\n  helloWorld: Scalars['String']\n  me: User\n  song: Song\n  songs: SongConnection\n}\n\nexport type QueryHelloArgs = {\n  name: Scalars['String']\n}\n\nexport type QuerySongArgs = {\n  id: Scalars['String']\n}\n\nexport type QuerySongsArgs = {\n  after?: Maybe<Scalars['String']>\n  before?: Maybe<Scalars['String']>\n  filter?: Maybe<SongFilter>\n  first?: Maybe<Scalars['Int']>\n  last?: Maybe<Scalars['Int']>\n  orderBy?: Maybe<SongOrder>\n  query?: Maybe<Scalars['String']>\n  skip?: Maybe<Scalars['Int']>\n}\n\n/** User role */\nexport enum Role {\n  Admin = 'ADMIN',\n  User = 'USER',\n}\n\nexport type SignupInput = {\n  email: Scalars['String']\n  password: Scalars['String']\n  username: Scalars['String']\n}\n\nexport type Song = {\n  __typename?: 'Song'\n  artist: Scalars['String']\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['Date']\n  difficulty: Difficulty\n  id: Scalars['ID']\n  postedBy: User\n  style?: Maybe<GuitarStyle>\n  tab: Tab\n  title: Scalars['String']\n  tuning?: Maybe<Scalars['String']>\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['Date']\n}\n\nexport type SongConnection = {\n  __typename?: 'SongConnection'\n  edges?: Maybe<Array<SongEdge>>\n  pageInfo: PageInfo\n  totalCount: Scalars['Int']\n}\n\nexport type SongEdge = {\n  __typename?: 'SongEdge'\n  cursor: Scalars['String']\n  node: Song\n}\n\nexport type SongFilter = {\n  difficulty?: Maybe<Difficulty>\n  style?: Maybe<GuitarStyle>\n  tuning?: Maybe<Scalars['String']>\n}\n\nexport type SongOrder = {\n  direction: OrderDirection\n  field: SongOrderField\n}\n\n/** Properties by which song connections can be ordered. */\nexport enum SongOrderField {\n  Artist = 'artist',\n  CreatedAt = 'createdAt',\n  Difficulty = 'difficulty',\n  Id = 'id',\n  PostedBy = 'postedBy',\n  Style = 'style',\n  Title = 'title',\n  Tuning = 'tuning',\n}\n\nexport type Tab = {\n  __typename?: 'Tab'\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['Date']\n  id: Scalars['ID']\n  tempo: Scalars['Int']\n  tempoName: Scalars['String']\n  tracks: Array<Track>\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['Date']\n}\n\nexport type Token = {\n  __typename?: 'Token'\n  /** JWT access token */\n  accessToken: Scalars['String']\n  /** JWT refresh token */\n  refreshToken: Scalars['String']\n}\n\nexport type Track = {\n  __typename?: 'Track'\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['Date']\n  id: Scalars['ID']\n  measures: Scalars['JSON']\n  offset: Scalars['Int']\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['Date']\n}\n\nexport type UpdatePlaygroundSettings = {\n  guitarOrientation?: Maybe<GuitarOrientation>\n  guitarStyle?: Maybe<GuitarStyle>\n  guitarType?: Maybe<GuitarType>\n}\n\nexport type UpdateUserInput = {\n  avatarUrl?: Maybe<Scalars['String']>\n  playgroundSettings?: Maybe<UpdatePlaygroundSettings>\n  username?: Maybe<Scalars['String']>\n}\n\nexport type User = {\n  __typename?: 'User'\n  avatarUrl?: Maybe<Scalars['String']>\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['Date']\n  email: Scalars['String']\n  id: Scalars['ID']\n  playgroundSettings: PlaygroundSettings\n  role: Role\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['Date']\n  username: Scalars['String']\n}\n\nexport type SongsQueryVariables = Exact<{\n  first: Scalars['Int']\n  after: Scalars['String']\n  query?: Maybe<Scalars['String']>\n  filter?: Maybe<SongFilter>\n  orderBy?: Maybe<SongOrder>\n}>\n\nexport type SongsQuery = { __typename?: 'Query' } & {\n  songs: { __typename?: 'SongConnection' } & Pick<\n    SongConnection,\n    'totalCount'\n  > & {\n      edges?: Maybe<\n        Array<\n          { __typename?: 'SongEdge' } & {\n            node: { __typename?: 'Song' } & Pick<\n              Song,\n              | 'id'\n              | 'title'\n              | 'tuning'\n              | 'style'\n              | 'updatedAt'\n              | 'difficulty'\n              | 'artist'\n            >\n          }\n        >\n      >\n      pageInfo: { __typename?: 'PageInfo' } & Pick<\n        PageInfo,\n        'endCursor' | 'hasNextPage'\n      >\n    }\n}\n\nexport type SongQueryVariables = Exact<{\n  id: Scalars['String']\n}>\n\nexport type SongQuery = { __typename?: 'Query' } & {\n  song: { __typename?: 'Song' } & Pick<\n    Song,\n    'id' | 'title' | 'tuning' | 'style' | 'updatedAt' | 'difficulty' | 'artist'\n  > & {\n      tab: { __typename?: 'Tab' } & Pick<Tab, 'tempo' | 'tempoName'> & {\n          tracks: Array<\n            { __typename?: 'Track' } & Pick<Track, 'measures' | 'offset'>\n          >\n        }\n    }\n}\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me: { __typename?: 'User' } & Pick<\n    User,\n    'username' | 'email' | 'avatarUrl'\n  > & {\n      playgroundSettings: { __typename?: 'PlaygroundSettings' } & Pick<\n        PlaygroundSettings,\n        'guitarOrientation' | 'guitarStyle' | 'guitarType'\n      >\n    }\n}\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String']\n  password: Scalars['String']\n}>\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login: { __typename?: 'Auth' } & Pick<Auth, 'refreshToken'>\n}\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String']\n  email: Scalars['String']\n  password: Scalars['String']\n}>\n\nexport type RegisterMutation = { __typename?: 'Mutation' } & {\n  signup: { __typename?: 'Auth' } & Pick<Auth, 'refreshToken'>\n}\n\nexport type UpdateUserMutationVariables = Exact<{\n  playgroundSettings?: Maybe<UpdatePlaygroundSettings>\n  avatarUrl?: Maybe<Scalars['String']>\n  username?: Maybe<Scalars['String']>\n}>\n\nexport type UpdateUserMutation = { __typename?: 'Mutation' } & {\n  updateUser: { __typename?: 'User' } & Pick<User, 'id'>\n}\n\nexport const SongsDocument = gql`\n  query Songs(\n    $first: Int!\n    $after: String!\n    $query: String\n    $filter: SongFilter\n    $orderBy: SongOrder\n  ) {\n    songs(\n      first: $first\n      after: $after\n      query: $query\n      filter: $filter\n      orderBy: $orderBy\n    ) {\n      edges {\n        node {\n          id\n          title\n          tuning\n          style\n          updatedAt\n          difficulty\n          artist\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      totalCount\n    }\n  }\n`\n\n/**\n * __useSongsQuery__\n *\n * To run a query within a React component, call `useSongsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSongsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSongsQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      query: // value for 'query'\n *      filter: // value for 'filter'\n *      orderBy: // value for 'orderBy'\n *   },\n * });\n */\nexport function useSongsQuery(\n  baseOptions: Apollo.QueryHookOptions<SongsQuery, SongsQueryVariables>,\n) {\n  return Apollo.useQuery<SongsQuery, SongsQueryVariables>(\n    SongsDocument,\n    baseOptions,\n  )\n}\nexport function useSongsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<SongsQuery, SongsQueryVariables>,\n) {\n  return Apollo.useLazyQuery<SongsQuery, SongsQueryVariables>(\n    SongsDocument,\n    baseOptions,\n  )\n}\nexport type SongsQueryHookResult = ReturnType<typeof useSongsQuery>\nexport type SongsLazyQueryHookResult = ReturnType<typeof useSongsLazyQuery>\nexport type SongsQueryResult = Apollo.QueryResult<\n  SongsQuery,\n  SongsQueryVariables\n>\nexport const SongDocument = gql`\n  query Song($id: String!) {\n    song(id: $id) {\n      id\n      title\n      tuning\n      style\n      updatedAt\n      difficulty\n      artist\n      tab {\n        tracks {\n          measures\n          offset\n        }\n        tempo\n        tempoName\n      }\n    }\n  }\n`\n\n/**\n * __useSongQuery__\n *\n * To run a query within a React component, call `useSongQuery` and pass it any options that fit your needs.\n * When your component renders, `useSongQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSongQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSongQuery(\n  baseOptions: Apollo.QueryHookOptions<SongQuery, SongQueryVariables>,\n) {\n  return Apollo.useQuery<SongQuery, SongQueryVariables>(\n    SongDocument,\n    baseOptions,\n  )\n}\nexport function useSongLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<SongQuery, SongQueryVariables>,\n) {\n  return Apollo.useLazyQuery<SongQuery, SongQueryVariables>(\n    SongDocument,\n    baseOptions,\n  )\n}\nexport type SongQueryHookResult = ReturnType<typeof useSongQuery>\nexport type SongLazyQueryHookResult = ReturnType<typeof useSongLazyQuery>\nexport type SongQueryResult = Apollo.QueryResult<SongQuery, SongQueryVariables>\nexport const MeDocument = gql`\n  query me {\n    me {\n      username\n      email\n      avatarUrl\n      playgroundSettings {\n        guitarOrientation\n        guitarStyle\n        guitarType\n      }\n    }\n  }\n`\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>,\n) {\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions)\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>,\n) {\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions)\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>\nexport const LoginDocument = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(data: { email: $email, password: $password }) {\n      refreshToken\n    }\n  }\n`\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >,\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions,\n  )\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>\nexport const RegisterDocument = gql`\n  mutation Register($username: String!, $email: String!, $password: String!) {\n    signup(data: { username: $username, email: $email, password: $password }) {\n      refreshToken\n    }\n  }\n`\nexport type RegisterMutationFn = Apollo.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >,\n) {\n  return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(\n    RegisterDocument,\n    baseOptions,\n  )\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>\nexport const UpdateUserDocument = gql`\n  mutation updateUser(\n    $playgroundSettings: UpdatePlaygroundSettings\n    $avatarUrl: String\n    $username: String\n  ) {\n    updateUser(\n      data: {\n        playgroundSettings: $playgroundSettings\n        avatarUrl: $avatarUrl\n        username: $username\n      }\n    ) {\n      id\n    }\n  }\n`\nexport type UpdateUserMutationFn = Apollo.MutationFunction<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      playgroundSettings: // value for 'playgroundSettings'\n *      avatarUrl: // value for 'avatarUrl'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUpdateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserMutation,\n    UpdateUserMutationVariables\n  >,\n) {\n  return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(\n    UpdateUserDocument,\n    baseOptions,\n  )\n}\nexport type UpdateUserMutationHookResult = ReturnType<\n  typeof useUpdateUserMutation\n>\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>\n","/home/mstoian/Documents/6string/client/src/Babylon/BabylonMainPage.tsx",["219","220","221","222","223","224"],"/home/mstoian/Documents/6string/client/src/Hooks/useWindowSize.ts",["225"],"import { useEffect, useState } from 'react'\n\nconst useWindowSize = () => {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<{\n    width: number\n    height: number\n  }>({\n    width: 0,\n    height: 0,\n  })\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n    }\n\n    // Add event listener\n    window.addEventListener('resize', handleResize)\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize()\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener('resize', handleResize)\n  }, []) // Empty array ensures that effect is only run on mount\n\n  return windowSize\n}\n\nexport default useWindowSize\n","/home/mstoian/Documents/6string/client/src/Babylon/types.ts",[],"/home/mstoian/Documents/6string/client/src/Babylon/Vertices.ts",[],"/home/mstoian/Documents/6string/client/src/Babylon/AnimateGuitarString.ts",["226","227","228"],"import { MeshBuilder, Vector3 } from '@babylonjs/core'\nimport { Mesh } from '@babylonjs/core/Meshes/mesh'\n\nimport { GuitarString } from './types'\nimport { strings } from './Vertices'\n\nexport const updateString = (stringName: GuitarString, newPath: Vector3[]) => {\n  if (strings[stringName])\n    strings[stringName] = MeshBuilder.CreateTube(stringName + 'string', {\n      path: newPath,\n      instance: strings[stringName] as Mesh,\n    })\n}\n\ntype animateGuitarStringArgs = {\n  stringName: GuitarString\n  path: Vector3[]\n  directionVector: Vector3\n  controlPointParameter: number\n  controlZFactor: number\n  min: number\n  max: number\n  animationRatio: number\n  stepOsc?: number\n  stepMin?: number\n  stepMax?: number\n  restart?: boolean\n  run?: boolean\n}\n\nexport type animateGuitarStringReturnType = {\n  done: boolean\n  min: number\n  max: number\n  stepOsc: number\n}\nexport const animateGuitarString = ({\n  stringName,\n  path,\n  directionVector,\n  controlPointParameter,\n  animationRatio,\n  controlZFactor,\n  min,\n  max,\n  stepOsc,\n  restart,\n}: animateGuitarStringArgs): {\n  done: boolean\n  min: number\n  max: number\n  stepOsc: number\n} => {\n  const animationSpeed = animationRatio * 0.0003\n  // The control point is where the finger is placed\n  // So that the animation occurs only to the free string\n  const controlPoint = path[0].add(\n    directionVector.multiplyByFloats(\n      controlPointParameter,\n      controlPointParameter,\n      controlPointParameter,\n    ),\n  )\n  // Oscillation point, the point from the middle of the remaining string\n  const oscPoint = path[0].add(\n    directionVector.multiplyByFloats(\n      controlPointParameter / 2,\n      controlPointParameter / 2,\n      controlPointParameter / 2,\n    ),\n  )\n\n  if (restart) {\n    return { done: false, min: min, max: max, stepOsc: 0 }\n  } else {\n    // If the oscillation step is less than 0 we want a positive move this time\n    // And else a negative move\n    let minLocal = min\n    let maxLocal = max\n    if (stepOsc! < 0) {\n      maxLocal -= animationSpeed\n      stepOsc = maxLocal\n    } else {\n      minLocal += animationSpeed\n      stepOsc = minLocal\n    }\n    if (maxLocal < 0 || minLocal > 0) {\n      return { done: true, min: 0, max: 0, stepOsc: 0 }\n    }\n    oscPoint.addInPlaceFromFloats(0, stepOsc, 0)\n    const newPath = [path[0], oscPoint, controlPoint, path[path.length - 1]]\n    updateString(stringName, newPath)\n    return {\n      done: false,\n      min: minLocal,\n      max: maxLocal,\n      stepOsc: stepOsc,\n    }\n  }\n}\n","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Measure.tsx",["229","230"],"/** @jsxImportSource @emotion/react **/\n\nimport { css } from '@emotion/react'\nimport { colors } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { FC } from 'react'\n\nimport { useRect } from '../../Hooks/useRect'\nimport useWindowSize from '../../Hooks/useWindowSize'\nimport { Measure as MeasureType } from '../../Types/guitarProTabs.types'\nimport { Cursor } from './Cursor'\n\ntype MeasureProps = {\n  measure: MeasureType\n  nextMeasureStart: number\n  previousMeasureEnd: number\n  key: number\n  parentTopRect: number\n  cursorPosition?: number\n  windowSize: { width: number; height: number }\n}\n\nconst notePositioning = {\n  1: 12,\n  2: 29,\n  3: 46,\n  4: 63,\n  5: 80,\n  6: 97,\n}\nconst NOTE_DISTANCE_CONSTANT = 6\n\nexport const Measure: FC<MeasureProps> = React.memo(\n  ({\n    measure,\n    nextMeasureStart,\n    previousMeasureEnd,\n    key,\n    parentTopRect,\n    cursorPosition,\n    windowSize,\n  }) => {\n    const [rectLeft, setRectLeft] = useState(0)\n    const [rectTop, setRectTop] = useState(0)\n    const contentRef = React.createRef<HTMLDivElement>()\n    const thisMeasureEnd =\n      measure.voices[0].beats[measure.voices[0].beats.length - 1].start\n\n    const thisMeasureActualStart =\n      measure.start - (measure.start - previousMeasureEnd) / 2\n\n    const thisMeasureActualEnd =\n      nextMeasureStart - (nextMeasureStart - thisMeasureEnd) / 2\n\n    const measureDuration = thisMeasureActualEnd - thisMeasureActualStart\n\n    const measureWidth = measureDuration / NOTE_DISTANCE_CONSTANT\n\n    useEffect(() => {\n      const rect = contentRef.current?.getBoundingClientRect()\n      if (rect) {\n        setRectLeft(rect.x)\n        setRectTop(rect.y)\n      }\n    }, [contentRef, windowSize])\n\n    const topOffset = rectTop - parentTopRect\n    return (\n      <div\n        css={css`\n          width: ${measureWidth}px;\n          display: grid;\n          gap: 15px;\n          grid-template-areas:\n            '1'\n            '2'\n            '3'\n            '4'\n            '5'\n            '6';\n          border-right: 2px solid ${colors.grey[900]};\n          border-left: 2px solid ${colors.grey[900]};\n        `}\n        key={key}\n        ref={contentRef}\n      >\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 1;\n          `}\n        />\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 2;\n          `}\n        />\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 3;\n          `}\n        />\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 4;\n          `}\n        />\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 5;\n          `}\n        />\n        <div\n          css={css`\n            border-top: 2px solid ${colors.grey[600]};\n            grid-area: 6;\n          `}\n        />\n\n        {measure.voices[0].beats.map((beat) => {\n          const beatPosition =\n            (beat.start - thisMeasureActualStart) / NOTE_DISTANCE_CONSTANT\n          return beat.notes.map((note, index) => {\n            return (\n              <div\n                key={index}\n                css={css`\n                  position: absolute;\n                  z-index: 2;\n                  background-color: white;\n                  padding-left: 2px;\n                  padding-right: 2px;\n                  top: ${topOffset + notePositioning[note.string]}px;\n                  left: ${rectLeft + beatPosition - 40}px;\n                `}\n              >\n                {note.value}\n              </div>\n            )\n          })\n        })}\n\n        {typeof cursorPosition !== 'undefined' && (\n          <div\n            css={css`\n              margin-top: -15px;\n              margin-left: -2px;\n              position: absolute;\n              z-index: 3;\n              left: ${rectLeft +\n              (measure.voices[0].beats[cursorPosition].start -\n                thisMeasureActualStart) /\n                NOTE_DISTANCE_CONSTANT -\n              40}px;\n            `}\n          >\n            <Cursor />\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n","/home/mstoian/Documents/6string/client/src/Hooks/useFileUpload.tsx",["231"],"const url = 'https://api.cloudinary.com/v1_1/dizv2pxl0/image/upload'\n\ntype cloudinaryReturn = {\n  public_id: string\n}\nexport const useFileUpload = () => {\n  const uploadFile = async (file: File): Promise<cloudinaryReturn> => {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('resource_type', 'image')\n    formData.append('upload_preset', 'project-sixstring-dev')\n    const response = await fetch(url, {\n      method: 'POST',\n      body: formData,\n    })\n    const data = response.json()\n    return data\n  }\n  return uploadFile\n}\n","/home/mstoian/Documents/6string/client/src/Utils/ValidUrl.ts",[],"/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/babylonjs-hook.tsx",["232","233","234","235","236","237","238","239","240","241","242"],"import {\n  Camera,\n  Engine,\n  EngineOptions,\n  EventState,\n  Nullable,\n  Observer,\n  Scene,\n  SceneOptions,\n} from '@babylonjs/core'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\n\nimport { EngineCanvasContext, EngineCanvasContextType } from './engine'\nimport { SceneContext, SceneContextType } from './scene'\n\nexport * from './engine'\nexport * from './scene'\n\nexport type BabylonjsProps = {\n  antialias?: boolean\n  engineOptions?: EngineOptions\n  adaptToDeviceRatio?: boolean\n  renderChildrenWhenReady?: boolean\n  sceneOptions?: SceneOptions\n  onSceneReady: (scene: Scene) => void\n  onRender?: (scene: Scene) => void\n  id: string\n  children?: React.ReactNode\n  css?: any\n}\n\nexport type OnFrameRenderFn = (eventData: Scene, eventState: EventState) => void\n\n/**\n * Register a callback for before the scene renders.\n *\n * @param callback called using onBeforeRender functionality of scene\n * @param mask the mask used to filter observers\n * @param insertFirst if true will be inserted at first position, if false (default) will be last position.\n * @param callOnce only call the callback once\n */\nexport const useBeforeRender = (\n  callback: OnFrameRenderFn,\n  mask?: number,\n  insertFirst?: boolean,\n  callOnce?: boolean,\n): void => {\n  const { scene } = useContext(SceneContext)\n\n  useEffect(() => {\n    if (scene === null) {\n      return\n    }\n\n    const unregisterOnFirstCall: boolean = callOnce === true\n    const sceneObserver: Nullable<\n      Observer<Scene>\n    > = scene.onBeforeRenderObservable.add(\n      callback,\n      mask,\n      insertFirst,\n      undefined,\n      unregisterOnFirstCall,\n    )\n\n    if (unregisterOnFirstCall !== true) {\n      return () => {\n        scene.onBeforeRenderObservable.remove(sceneObserver)\n      }\n    }\n  })\n}\n\n/**\n * Register a callback for after the scene renders.\n *\n * @param callback called using onBeforeRender functionality of scene\n * @param mask the mask used to filter observers\n * @param insertFirst if true will be inserted at first position, if false (default) will be last position.\n * @param callOnce only call the callback once\n */\nexport const useAfterRender = (\n  callback: OnFrameRenderFn,\n  mask?: number,\n  insertFirst?: boolean,\n  callOnce?: boolean,\n): void => {\n  const { scene } = useContext(SceneContext)\n\n  useEffect(() => {\n    if (scene === null) {\n      return\n    }\n\n    const unregisterOnFirstCall: boolean = callOnce === true\n    const sceneObserver: Nullable<\n      Observer<Scene>\n    > = scene.onAfterRenderObservable.add(\n      callback,\n      mask,\n      insertFirst,\n      undefined,\n      unregisterOnFirstCall,\n    )\n\n    if (unregisterOnFirstCall !== true) {\n      return () => {\n        scene.onAfterRenderObservable.remove(sceneObserver)\n      }\n    }\n  })\n}\n\n/**\n * Handles creating a camera and attaching/disposing.\n * TODO: add new 4.2 parameters: useCtrlForPanning & panningMouseButton\n * @param createCameraFn function that creates and returns a camera\n * @param autoAttach Attach the input controls (default true)\n * @param noPreventDefault Events caught by controls should call prevent default\n */\nexport const useCamera = <T extends Camera>(\n  createCameraFn: (scene: Scene) => T,\n  autoAttach = true,\n  noPreventDefault = true,\n): Nullable<T> => {\n  const { scene } = useContext(SceneContext)\n  const cameraRef = useRef<Nullable<T>>(null)\n\n  useEffect(() => {\n    if (scene === null) {\n      console.warn('cannot create camera (scene not ready)')\n      return\n    }\n\n    const camera = createCameraFn(scene)\n    if (autoAttach === true) {\n      const canvas: HTMLCanvasElement = scene.getEngine()!.getRenderingCanvas()!\n\n      // This attaches the camera to the canvas\n      // https://github.com/BabylonJS/Babylon.js/pull/9192 (keep canvas to work with < 4.2 beta-13)\n      ;(camera as any).attachControl(canvas, noPreventDefault)\n    }\n    cameraRef.current = camera\n\n    return () => {\n      if (autoAttach === true) {\n        const canvas: HTMLCanvasElement = scene\n          .getEngine()!\n          .getRenderingCanvas()!\n        ;(camera as any).detachControl(canvas)\n      }\n      camera.dispose()\n    }\n  }, [scene])\n\n  return cameraRef.current\n}\n\nexport default (props: BabylonjsProps) => {\n  const reactCanvas = useRef<Nullable<HTMLCanvasElement>>(null)\n  const {\n    antialias,\n    engineOptions,\n    adaptToDeviceRatio,\n    sceneOptions,\n    onRender,\n    onSceneReady,\n    renderChildrenWhenReady,\n    children,\n    ...rest\n  } = props\n\n  const [sceneContext, setSceneContext] = useState<SceneContextType>({\n    scene: null,\n    sceneReady: false,\n  })\n\n  const [engineContext, setEngineContext] = useState<EngineCanvasContextType>({\n    engine: null,\n    canvas: null,\n  })\n\n  useEffect(() => {\n    if (reactCanvas.current) {\n      const engine = new Engine(\n        reactCanvas.current,\n        antialias,\n        engineOptions,\n        adaptToDeviceRatio,\n      )\n      setEngineContext(() => ({\n        engine,\n        canvas: reactCanvas.current,\n      }))\n\n      const scene = new Scene(engine, sceneOptions)\n      const sceneIsReady = scene.isReady()\n      if (sceneIsReady) {\n        props.onSceneReady(scene)\n      } else {\n        scene.onReadyObservable.addOnce((scene) => {\n          props.onSceneReady(scene)\n          setSceneContext(() => ({\n            canvas: reactCanvas.current,\n            scene,\n            engine,\n            sceneReady: true,\n          }))\n        })\n      }\n\n      engine.runRenderLoop(() => {\n        if (scene.activeCamera) {\n          if (typeof onRender === 'function') {\n            onRender(scene)\n          }\n          scene.render()\n        } else {\n          // @babylonjs/core throws an error if you attempt to render with no active camera.\n          // if we attach as a child React component we have frames with no active camera.\n          console.warn('no active camera..')\n        }\n      })\n\n      const resize = () => {\n        scene.getEngine().resize()\n      }\n\n      if (window) {\n        window.addEventListener('resize', resize)\n      }\n\n      setSceneContext(() => ({\n        canvas: reactCanvas.current,\n        scene,\n        engine,\n        sceneReady: sceneIsReady,\n      }))\n\n      return () => {\n        scene.getEngine().dispose()\n\n        if (window) {\n          window.removeEventListener('resize', resize)\n        }\n      }\n    }\n  }, [reactCanvas])\n\n  return (\n    <>\n      <canvas ref={reactCanvas} {...rest} />\n      <EngineCanvasContext.Provider value={engineContext}>\n        <SceneContext.Provider value={sceneContext}>\n          {(renderChildrenWhenReady !== true ||\n            (renderChildrenWhenReady === true && sceneContext.sceneReady)) &&\n            children}\n        </SceneContext.Provider>\n      </EngineCanvasContext.Provider>\n    </>\n  )\n}\n","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/index.ts",["243"],"import { useCallback, useEffect, useState } from 'react'\n\nimport withSamples from './instruments/samples'\nimport withSoundFont from './instruments/sound-font'\nimport makePlayer, { Player, StringInstrument } from './util/player'\n\nexport { withSamples, withSoundFont }\nexport type { StringInstrument }\n\nconst defaultInstrument = withSoundFont('acoustic_guitar_nylon')\n\nexport default function useSound(props: {\n  instrument?: StringInstrument\n  tuning: number[]\n  muted?: boolean\n}) {\n  const { tuning, muted, instrument = defaultInstrument } = props\n  const [player, setPlayer] = useState<Player>()\n  const [playing, setPlaying] = useState(tuning.map(() => false))\n\n  useEffect(() => {\n    const promise = makePlayer(instrument, tuning, setPlaying)\n    promise.then(setPlayer)\n\n    return () => {\n      setPlayer(undefined)\n      promise.then((player) => {\n        player.dispose()\n      })\n    }\n  }, [instrument, tuning])\n\n  const play = useCallback(\n    (string: number, when = 0, fretting: number[]) => {\n      if (!muted) player?.play(string, fretting[string] ?? 0, when)\n    },\n    [muted, player],\n  )\n\n  // const strum = useCallback(\n  //   (up?: boolean) =>\n  //     tuning.forEach((_, i) => play(!up ? tuning.length - i - 1 : i, 0.05 * i)),\n  //   [tuning, play],\n  // )\n\n  return { play, playing, loading: !player }\n}\n","/home/mstoian/Documents/6string/client/src/Pages/SongPlayPage/Cursor.tsx",[],"/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/scene.tsx",[],"/home/mstoian/Documents/6string/client/src/Babylon/BabylonjsHook/engine.tsx",["244"],"import { Engine, Nullable } from '@babylonjs/core'\nimport React, { createContext, useContext } from 'react'\nexport type EngineCanvasContextType = {\n  engine: Nullable<Engine>\n  canvas: Nullable<HTMLCanvasElement | WebGLRenderingContext>\n}\n\nexport const EngineCanvasContext = createContext<EngineCanvasContextType>({\n  engine: null,\n  canvas: null,\n})\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n\nexport function withEngineCanvasContext<\n  P extends { engineCanvasContext: EngineCanvasContextType },\n  R = Omit<P, 'engineCanvasContext'>\n>(\n  Component: React.ComponentClass<P> | React.FunctionComponent<P>,\n): React.FunctionComponent<R> {\n  return function BoundComponent(props: R) {\n    return (\n      <EngineCanvasContext.Consumer>\n        {(ctx) => <Component {...(props as any)} engineCanvasContext={ctx} />}\n      </EngineCanvasContext.Consumer>\n    )\n  }\n}\n\n/**\n * Get the engine from the context.\n */\nexport const useEngine = (): Nullable<Engine> =>\n  useContext(EngineCanvasContext).engine\n\n/**\n * Get the canvas DOM element from the context.\n */\nexport const useCanvas = (): Nullable<\n  HTMLCanvasElement | WebGLRenderingContext\n> => useContext(EngineCanvasContext).canvas\n","/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/util/player.ts",[],"/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/instruments/samples.ts",[],"/home/mstoian/Documents/6string/client/src/Packages/react-guitar-sound/instruments/sound-font.ts",["245"],"import Soundfont, { InstrumentName } from 'soundfont-player'\n\nimport { StringInstrument } from '../util/player'\n\nexport default function withSoundFont(\n  instrumentName: InstrumentName,\n  options?: {\n    format?: 'mp3' | 'ogg'\n    soundfont?: 'FluidR3_GM' | 'MusyngKite'\n  },\n): StringInstrument {\n  return async (tuning) => {\n    const audioContext = new AudioContext()\n    const player = await Soundfont.instrument(audioContext, instrumentName, {\n      format: 'ogg',\n      ...options,\n    })\n\n    return {\n      play: (string, fret, when = 0) => {\n        player.play(\n          (tuning[string] + fret) as any,\n          audioContext.currentTime + when,\n          {\n            duration: 4,\n            gain: 4,\n          },\n        )\n      },\n      dispose: () => {\n        player.stop()\n        audioContext.close()\n      },\n    }\n  }\n}\n",{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":3,"column":25,"nodeType":"250","messageId":"251","endLine":3,"endColumn":57},{"ruleId":"252","severity":1,"message":"253","line":4,"column":35,"nodeType":"254","messageId":"255","endLine":4,"endColumn":39},{"ruleId":"252","severity":1,"message":"256","line":6,"column":8,"nodeType":"254","messageId":"255","endLine":6,"endColumn":12},{"ruleId":"252","severity":1,"message":"257","line":12,"column":10,"nodeType":"254","messageId":"255","endLine":12,"endColumn":14},{"ruleId":"248","severity":1,"message":"249","line":15,"column":1,"nodeType":"258","messageId":"251","endLine":15,"endColumn":15},{"ruleId":"252","severity":1,"message":"259","line":8,"column":3,"nodeType":"254","messageId":"255","endLine":8,"endColumn":8},{"ruleId":"260","severity":1,"message":"261","line":45,"column":35,"nodeType":"262","messageId":"263","endLine":45,"endColumn":47,"suggestions":"264"},{"ruleId":"252","severity":1,"message":"265","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":16},{"ruleId":"252","severity":1,"message":"266","line":6,"column":17,"nodeType":"254","messageId":"255","endLine":6,"endColumn":26},{"ruleId":"252","severity":1,"message":"267","line":6,"column":39,"nodeType":"254","messageId":"255","endLine":6,"endColumn":46},{"ruleId":"252","severity":1,"message":"268","line":6,"column":48,"nodeType":"254","messageId":"255","endLine":6,"endColumn":54},{"ruleId":"252","severity":1,"message":"269","line":6,"column":56,"nodeType":"254","messageId":"255","endLine":6,"endColumn":64},{"ruleId":"252","severity":1,"message":"270","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":18},{"ruleId":"252","severity":1,"message":"271","line":9,"column":10,"nodeType":"254","messageId":"255","endLine":9,"endColumn":19},{"ruleId":"252","severity":1,"message":"272","line":9,"column":21,"nodeType":"254","messageId":"255","endLine":9,"endColumn":33},{"ruleId":"252","severity":1,"message":"273","line":11,"column":13,"nodeType":"254","messageId":"255","endLine":11,"endColumn":17},{"ruleId":"252","severity":1,"message":"274","line":14,"column":10,"nodeType":"254","messageId":"255","endLine":14,"endColumn":23},{"ruleId":"252","severity":1,"message":"275","line":16,"column":10,"nodeType":"254","messageId":"255","endLine":16,"endColumn":17},{"ruleId":"252","severity":1,"message":"276","line":17,"column":8,"nodeType":"254","messageId":"255","endLine":17,"endColumn":21},{"ruleId":"252","severity":1,"message":"277","line":18,"column":8,"nodeType":"254","messageId":"255","endLine":18,"endColumn":16},{"ruleId":"252","severity":1,"message":"278","line":21,"column":14,"nodeType":"254","messageId":"255","endLine":21,"endColumn":25},{"ruleId":"252","severity":1,"message":"279","line":23,"column":10,"nodeType":"254","messageId":"255","endLine":23,"endColumn":17},{"ruleId":"252","severity":1,"message":"280","line":30,"column":17,"nodeType":"254","messageId":"255","endLine":30,"endColumn":24},{"ruleId":"252","severity":1,"message":"281","line":32,"column":9,"nodeType":"254","messageId":"255","endLine":32,"endColumn":14},{"ruleId":"252","severity":1,"message":"282","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":13},{"ruleId":"252","severity":1,"message":"283","line":3,"column":15,"nodeType":"254","messageId":"255","endLine":3,"endColumn":26},{"ruleId":"260","severity":1,"message":"261","line":44,"column":35,"nodeType":"262","messageId":"263","endLine":44,"endColumn":47,"suggestions":"284"},{"ruleId":"260","severity":1,"message":"261","line":90,"column":21,"nodeType":"262","messageId":"263","endLine":90,"endColumn":51},{"ruleId":"285","severity":1,"message":"286","line":92,"column":6,"nodeType":"287","endLine":92,"endColumn":25,"suggestions":"288"},{"ruleId":"285","severity":1,"message":"289","line":107,"column":6,"nodeType":"287","endLine":107,"endColumn":18,"suggestions":"290"},{"ruleId":"252","severity":1,"message":"291","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":13},{"ruleId":"252","severity":1,"message":"269","line":5,"column":17,"nodeType":"254","messageId":"255","endLine":5,"endColumn":25},{"ruleId":"252","severity":1,"message":"291","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":13},{"ruleId":"252","severity":1,"message":"292","line":5,"column":8,"nodeType":"254","messageId":"255","endLine":5,"endColumn":13},{"ruleId":"252","severity":1,"message":"293","line":6,"column":10,"nodeType":"254","messageId":"255","endLine":6,"endColumn":12},{"ruleId":"252","severity":1,"message":"294","line":9,"column":3,"nodeType":"254","messageId":"255","endLine":9,"endColumn":8},{"ruleId":"260","severity":1,"message":"261","line":107,"column":43,"nodeType":"262","messageId":"263","endLine":107,"endColumn":61},{"ruleId":"252","severity":1,"message":"294","line":10,"column":3,"nodeType":"254","messageId":"255","endLine":10,"endColumn":8},{"ruleId":"252","severity":1,"message":"295","line":11,"column":3,"nodeType":"254","messageId":"255","endLine":11,"endColumn":6},{"ruleId":"252","severity":1,"message":"257","line":12,"column":3,"nodeType":"254","messageId":"255","endLine":12,"endColumn":7},{"ruleId":"252","severity":1,"message":"296","line":13,"column":3,"nodeType":"254","messageId":"255","endLine":13,"endColumn":13},{"ruleId":"260","severity":1,"message":"261","line":107,"column":43,"nodeType":"262","messageId":"263","endLine":107,"endColumn":61},{"ruleId":"246","replacedBy":"297"},{"ruleId":"252","severity":1,"message":"282","line":1,"column":10,"nodeType":"254","messageId":"255","endLine":1,"endColumn":13},{"ruleId":"252","severity":1,"message":"298","line":1,"column":15,"nodeType":"254","messageId":"255","endLine":1,"endColumn":23},{"ruleId":"248","severity":1,"message":"249","line":5,"column":31,"nodeType":"250","messageId":"251","endLine":5,"endColumn":36},{"ruleId":"299","severity":1,"message":"300","line":17,"column":9,"nodeType":"301","messageId":"302","endLine":17,"endColumn":12,"suggestions":"303"},{"ruleId":"299","severity":1,"message":"300","line":19,"column":9,"nodeType":"301","messageId":"302","endLine":19,"endColumn":12,"suggestions":"304"},{"ruleId":"248","severity":1,"message":"249","line":431,"column":8,"nodeType":"258","messageId":"251","endLine":433,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":439,"column":8,"nodeType":"258","messageId":"251","endLine":441,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":491,"column":8,"nodeType":"258","messageId":"251","endLine":493,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":499,"column":8,"nodeType":"258","messageId":"251","endLine":501,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":540,"column":8,"nodeType":"258","messageId":"251","endLine":542,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":545,"column":8,"nodeType":"258","messageId":"251","endLine":547,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":583,"column":8,"nodeType":"258","messageId":"251","endLine":588,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":631,"column":8,"nodeType":"258","messageId":"251","endLine":636,"endColumn":2},{"ruleId":"248","severity":1,"message":"249","line":689,"column":8,"nodeType":"258","messageId":"251","endLine":694,"endColumn":2},{"ruleId":"252","severity":1,"message":"305","line":167,"column":7,"nodeType":"254","messageId":"255","endLine":167,"endColumn":16},{"ruleId":"252","severity":1,"message":"306","line":169,"column":7,"nodeType":"254","messageId":"255","endLine":169,"endColumn":14},{"ruleId":"252","severity":1,"message":"307","line":170,"column":7,"nodeType":"254","messageId":"255","endLine":170,"endColumn":23},{"ruleId":"260","severity":1,"message":"261","line":207,"column":40,"nodeType":"262","messageId":"263","endLine":207,"endColumn":67,"suggestions":"308"},{"ruleId":"260","severity":1,"message":"261","line":224,"column":5,"nodeType":"262","messageId":"263","endLine":224,"endColumn":37},{"ruleId":"248","severity":1,"message":"249","line":255,"column":32,"nodeType":"250","messageId":"251","endLine":255,"endColumn":37},{"ruleId":"248","severity":1,"message":"249","line":3,"column":23,"nodeType":"250","messageId":"251","endLine":3,"endColumn":28},{"ruleId":"248","severity":1,"message":"249","line":7,"column":29,"nodeType":"250","messageId":"251","endLine":7,"endColumn":78},{"ruleId":"252","severity":1,"message":"309","line":43,"column":3,"nodeType":"254","messageId":"255","endLine":43,"endColumn":17},{"ruleId":"260","severity":1,"message":"261","line":80,"column":9,"nodeType":"262","messageId":"263","endLine":80,"endColumn":17},{"ruleId":"252","severity":1,"message":"275","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":17},{"ruleId":"252","severity":1,"message":"276","line":9,"column":8,"nodeType":"254","messageId":"255","endLine":9,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":6,"column":30,"nodeType":"250","messageId":"251","endLine":6,"endColumn":35},{"ruleId":"299","severity":1,"message":"300","line":29,"column":9,"nodeType":"301","messageId":"302","endLine":29,"endColumn":12,"suggestions":"310"},{"ruleId":"260","severity":1,"message":"261","line":137,"column":41,"nodeType":"262","messageId":"263","endLine":137,"endColumn":81},{"ruleId":"260","severity":1,"message":"261","line":137,"column":41,"nodeType":"262","messageId":"263","endLine":137,"endColumn":59,"suggestions":"311"},{"ruleId":"299","severity":1,"message":"300","line":141,"column":19,"nodeType":"301","messageId":"302","endLine":141,"endColumn":22,"suggestions":"312"},{"ruleId":"260","severity":1,"message":"261","line":147,"column":43,"nodeType":"262","messageId":"263","endLine":149,"endColumn":33},{"ruleId":"260","severity":1,"message":"261","line":147,"column":43,"nodeType":"262","messageId":"263","endLine":148,"endColumn":24,"suggestions":"313"},{"ruleId":"299","severity":1,"message":"300","line":150,"column":21,"nodeType":"301","messageId":"302","endLine":150,"endColumn":24,"suggestions":"314"},{"ruleId":"285","severity":1,"message":"315","line":154,"column":6,"nodeType":"287","endLine":154,"endColumn":13,"suggestions":"316"},{"ruleId":"248","severity":1,"message":"249","line":159,"column":16,"nodeType":"250","messageId":"251","endLine":159,"endColumn":42},{"ruleId":"252","severity":1,"message":"317","line":167,"column":5,"nodeType":"254","messageId":"255","endLine":167,"endColumn":17},{"ruleId":"285","severity":1,"message":"318","line":248,"column":6,"nodeType":"287","endLine":248,"endColumn":19,"suggestions":"319"},{"ruleId":"248","severity":1,"message":"249","line":12,"column":16,"nodeType":"258","messageId":"251","endLine":16,"endColumn":3},{"ruleId":"299","severity":1,"message":"300","line":24,"column":44,"nodeType":"301","messageId":"302","endLine":24,"endColumn":47,"suggestions":"320"},{"ruleId":"299","severity":1,"message":"300","line":22,"column":38,"nodeType":"301","messageId":"302","endLine":22,"endColumn":41,"suggestions":"321"},"jsx-a11y/accessible-emoji",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Tabs' is defined but never used.","FunctionDeclaration","'Input' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["322"],"'Button' is defined but never used.","'createRef' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'standard' is defined but never used.","'Resizable' is defined but never used.","'ResizableBox' is defined but never used.","'Tone' is defined but never used.","'PlaygroundNav' is defined but never used.","'useRect' is defined but never used.","'useWindowSize' is defined but never used.","'useSound' is defined but never used.","'MeasureType' is defined but never used.","'Measure' is defined but never used.","'loading' is assigned a value but never used.","'track' is assigned a value but never used.","'gql' is defined but never used.","'useMutation' is defined but never used.",["323"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'songs'. Either include it or remove the dependency array.","ArrayExpression",["324"],"React Hook useEffect has a missing dependency: 'activeDebounce'. Either include it or remove the dependency array.",["325"],"'css' is defined but never used.","'React' is defined but never used.","'FC' is defined but never used.","'Paper' is defined but never used.","'Tab' is defined but never used.","'Typography' is defined but never used.",[],"'useQuery' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["326","327"],["328","329"],"'parameter' is assigned a value but never used.","'started' is assigned a value but never used.","'animationsStatus' is assigned a value but never used.",["330"],"'controlZFactor' is defined but never used.",["331","332"],["333"],["334","335"],["336"],["337","338"],"React Hook useEffect has missing dependencies: 'autoAttach', 'createCameraFn', and 'noPreventDefault'. Either include them or remove the dependency array. If 'createCameraFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["339"],"'onSceneReady' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'adaptToDeviceRatio', 'antialias', 'engineOptions', 'onRender', 'props', and 'sceneOptions'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["340"],["341","342"],["343","344"],{"messageId":"345","fix":"346","desc":"347"},{"messageId":"345","fix":"348","desc":"347"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"messageId":"353","fix":"354","desc":"355"},{"messageId":"356","fix":"357","desc":"358"},{"messageId":"353","fix":"359","desc":"355"},{"messageId":"356","fix":"360","desc":"358"},{"messageId":"345","fix":"361","desc":"347"},{"messageId":"353","fix":"362","desc":"355"},{"messageId":"356","fix":"363","desc":"358"},{"messageId":"345","fix":"364","desc":"347"},{"messageId":"353","fix":"365","desc":"355"},{"messageId":"356","fix":"366","desc":"358"},{"messageId":"345","fix":"367","desc":"347"},{"messageId":"353","fix":"368","desc":"355"},{"messageId":"356","fix":"369","desc":"358"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"messageId":"353","fix":"374","desc":"355"},{"messageId":"356","fix":"375","desc":"358"},{"messageId":"353","fix":"376","desc":"355"},{"messageId":"356","fix":"377","desc":"358"},"suggestOptionalChain",{"range":"378","text":"379"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"380","text":"379"},"Update the dependencies array to be: [data, searchQuery, songs]",{"range":"381","text":"382"},"Update the dependencies array to be: [activeDebounce, queryField]",{"range":"383","text":"384"},"suggestUnknown",{"range":"385","text":"386"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"385","text":"387"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"388","text":"386"},{"range":"388","text":"387"},{"range":"389","text":"379"},{"range":"390","text":"386"},{"range":"390","text":"387"},{"range":"391","text":"379"},{"range":"392","text":"386"},{"range":"392","text":"387"},{"range":"393","text":"379"},{"range":"394","text":"386"},{"range":"394","text":"387"},"Update the dependencies array to be: [autoAttach, createCameraFn, noPreventDefault, scene]",{"range":"395","text":"396"},"Update the dependencies array to be: [adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]",{"range":"397","text":"398"},{"range":"399","text":"386"},{"range":"399","text":"387"},{"range":"400","text":"386"},{"range":"400","text":"387"},[1728,1729],"?",[1531,1532],[2389,2408],"[data, searchQuery, songs]",[2770,2782],"[activeDebounce, queryField]",[485,488],"unknown","never",[655,658],[5828,5829],[693,696],[3617,3618],[3808,3811],[4013,4014],[4068,4071],[4137,4144],"[autoAttach, createCameraFn, noPreventDefault, scene]",[6343,6356],"[adaptToDeviceRatio, antialias, engineOptions, onRender, props, reactCanvas, sceneOptions]",[796,799],[609,612]]