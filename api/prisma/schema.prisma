datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  username String
  role      Role
  avatarUrl String?
  playgroundSettings   PlaygroundSettings?
  userSettings         UserSettings?
  favoriteSongs        Song[] @relation("favoriteRelation")
  notifications        Notification[]
}

model PlaygroundSettings {
  id        String    @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  guitarStyle GuitarStyle?  @default(STRUM)
  guitarOrientation GuitarOrientation? @default( RIGHT_HANDED)
  guitarType GuitarType? @default(ACOUSTIC)
  chordWidget Boolean @default(true)

}

model UserSettings {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  notificationEnabled    Boolean @default(true)
  notificationRecommended    Boolean @default(true)
  notificationAdminReview   Boolean @default(true)
}

model Notification {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  for       User? @relation(fields: [userId], references: [id])
  userId    String?
  read      Boolean @default(false)
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum GuitarStyle {
  STRUM
  FINGERPICK
}
enum GuitarOrientation {
  LEFT_HANDED
  RIGHT_HANDED
}
enum GuitarType {
  CLASSICAL
  ACOUSTIC
  ELECTRICAL
}

model Song {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    title      String
    artist     String
    postedBy   User    @relation(fields: [postedById], references: [id])
    postedById String
    difficulty Difficulty
    tuning     String
    style      GuitarStyle?
    tab        Tab?
    archived   Boolean @default(false)
    inReview   Boolean @default(true)
    submittedToReview   Boolean @default(false)
    favoriteUsers User[] @relation("favoriteRelation")
}

model Tab {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    song       Song   @relation(fields: [songId], references: [id])
    songId     String
    tempo      Int
    tempoName  String
    tracks     Track[]
}

model Track {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    offset     Int
    measures   Json
    tab        Tab   @relation(fields: [tabId], references: [id])
    tabId      String
}
