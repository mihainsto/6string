# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddSongToFavoriteInput {
  songId: ID!
}

input ApproveSongInput {
  songId: ID!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeUserRoleInput {
  role: Role!
  userId: String!
}

input CreateSongInput {
  artist: String!
  difficulty: Difficulty!
  style: GuitarStyle
  tabUrl: String!
  title: String!
  tuning: String!
}

"""Date custom scalar type"""
scalar Date

input DeleteSongInReviewInput {
  songId: ID!
}

input DeleteUserInput {
  userId: String!
}

enum Difficulty {
  EASY
  HARD
  MEDIUM
}

enum GuitarOrientation {
  LEFT_HANDED
  RIGHT_HANDED
}

enum GuitarStyle {
  FINGERPICK
  STRUM
}

enum GuitarType {
  ACOUSTIC
  CLASSICAL
  ELECTRICAL
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addSongToFavorite(input: AddSongToFavoriteInput!): Song!
  approveSong(input: ApproveSongInput!): Song!
  changePassword(input: ChangePasswordInput!): User!
  changeUserRole(input: ChangeUserRoleInput!): User!
  createSong(input: CreateSongInput!): Song!
  deleteSongInReview(input: DeleteSongInReviewInput!): Song!
  deleteUser(input: DeleteUserInput!): User!
  login(data: LoginInput!): Auth!
  readNotification(input: ReadNotificationInput!): Notification!
  refreshToken(token: String!): Token!
  removeSongFromFavorite(input: RemoveSongFromFavoriteInput!): Song!
  signup(data: SignupInput!): Auth!
  submitSongToReview(input: SubmitSongToReviewInput!): Song!
  toggleNotificationSettings(input: ToggleNotificationSettingsInput!): User!
  updatePlaygroundSettings(input: UpdatePlaygroundSettingsInput!): User!
  updateUser(data: UpdateUserInput!): User!
  updateUserAvatar(input: UpdateUserAvatarInput!): User!
  updateUserEmail(input: UpdateUserEmailInput!): User!
  updateUserName(input: UpdateUserNameInput!): User!
}

type Notification {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  message: String!
  read: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PlaygroundSettings {
  chordWidget: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  guitarOrientation: GuitarOrientation!
  guitarStyle: GuitarStyle!
  guitarType: GuitarType!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Query {
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  song(id: String!): Song!
  songInReview(id: String!): Song!
  songs(after: String, before: String, favorite: Boolean, filter: SongFilter, first: Int, last: Int, orderBy: SongOrder, query: String, skip: Int): SongConnection!
  songsInReview(after: String, before: String, favorite: Boolean, filter: SongFilter, first: Int, last: Int, orderBy: SongOrder, query: String, skip: Int): SongConnection!
  user(id: String!): User!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrder, query: String, skip: Int): UserConnection!
}

input ReadNotificationInput {
  notificationId: ID!
}

input RemoveSongFromFavoriteInput {
  songId: ID!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  username: String!
}

type Song {
  archived: Boolean!
  artist: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  difficulty: Difficulty!
  favorite: Boolean!
  id: ID!
  inReview: Boolean!
  postedBy: User!
  style: GuitarStyle
  submittedToReview: Boolean!
  tab: Tab!
  title: String!
  tuning: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type SongConnection {
  edges: [SongEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type SongEdge {
  cursor: String!
  node: Song!
}

input SongFilter {
  difficulty: Difficulty
  style: GuitarStyle
  tuning: String
}

input SongOrder {
  direction: OrderDirection!
  field: SongOrderField!
}

"""Properties by which song connections can be ordered."""
enum SongOrderField {
  artist
  createdAt
  difficulty
  id
  postedBy
  style
  title
  tuning
}

input SubmitSongToReviewInput {
  songId: ID!
}

type Tab {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  tempo: Int!
  tempoName: String!
  tracks: [Track!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

input ToggleNotificationSettingsInput {
  notificationAdminReview: Boolean
  notificationEnabled: Boolean
  notificationRecommended: Boolean
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

type Track {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  measures: JSON!
  offset: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

input UpdatePlaygroundSettings {
  chordWidget: Boolean
  guitarOrientation: GuitarOrientation
  guitarStyle: GuitarStyle
  guitarType: GuitarType
}

input UpdatePlaygroundSettingsInput {
  playgroundSettings: UpdatePlaygroundSettings!
}

input UpdateUserAvatarInput {
  avatarUrl: String!
}

input UpdateUserEmailInput {
  email: String!
}

input UpdateUserInput {
  avatarUrl: String
  email: String
  playgroundSettings: UpdatePlaygroundSettings
  username: String
}

input UpdateUserNameInput {
  username: String!
}

type User {
  avatarUrl: String

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  id: ID!
  notifications: [Notification!]
  playgroundSettings: PlaygroundSettings!
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userSettings: UserSettings!
  username: String!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

"""Properties by which user connections can be ordered."""
enum UserOrderField {
  createdAt
  email
  id
  role
  username
}

type UserSettings {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  notificationAdminReview: Boolean!
  notificationEnabled: Boolean!
  notificationRecommended: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}
